#!/bin/bash
# author: doOnline.nl, Danny v. Dooijeweert
# required: sshfs
# future features:
# - Add "Create Mountpoint if dir does not exist."
# - Add "Test for sshfs dependency installed."
# - Add "SSH -o option handling."
# - Add "Installer script to create a directory in PATH so you can save configurations for different connections."
# - Add "Saving -s option so each connection on successful execute can be saved"
#       "and an -l option to load those connections without full command configuration eash time."
# - Add "Possible boot command execution to automatically mount on local machine after shutdown."

# Static Vars
_NAME="`basename $0`";
_VERS='1.2.5';
_DESC="$_NAME"' is a custom script to easily mount a remote file-system with sshfs and fuse. Current version: '"$_VERS";

# Non-Static Vars
DEBUG=0;
PERSISTENT=1;
MOUNTPOINT='/media';
KEY='~/.ssh/id_rsa';
HOST='storage@84.24.144.12:~/Storage';
UID_=0000;
GID_=0027;
OPT='allow_other,nonempty,reconnect';
# Argument Handling
ARGS=0;
OPTIND=1;
while getopts "hdk:r:m:u:g:o:" opt; do
    ARGS=1;
    case "$opt" in
    h)
        printf "[$_NAME] v$_VERS help: -option 'argument' : default -> 'argument type',
		\n---------------------------------------------------------------------
		\n-d 'sets debug enabled during execute.' : ${DEBUG} -> 'boolean',
		\n-k 'ssh-key saved location.' : ${KEY} -> 'filepath ~/.ssh/id_rsa',
		\n-r 'remote file-system.' : ${HOST} -> 'connection storage@10.47.0.20[:~/Storage/share]',
		\n-m 'local mount point directory.' : ${MOUNTPOINT} -> 'filepath ~/Storage/H2tkdsh00',
		\n-u 'unix User-ID file-system permissions.' : ${UID_} (DISABLED) -> 'int 0000',
		\n-g 'unix Group-ID file-system permissions.' : ${GID_} (DISABLED) -> 'int 0027',
		\n-o 'ssh options like: allow_other,reconnect,etc...' : ${SSHOPT} (DISABLED) -> 'ssh client config -o options: EscapeChar=none,IdentityFile='${KEY}',etc...',
		\n---------------------------------------------------------------------
		\n$_DESC
		\n";
        exit 0;
	;;
    d)  DEBUG=1;
        ;;
    k)  KEY=$OPTARG;
	;;
    r)  HOST=$OPTARG;
	;;
    m)  MOUNTPOINT=$OPTARG;
        ;;
    \?) echo -e "[$_NAME] Option -$OPTARG does not exist or is disabled, type $_NAME -h for help.";
        exit 1;
        ;;
    :)  echo -e "[$_NAME] Option -$OPTARG requires an argument, type $_NAME -h for help.";
      	exit 1;
	;;
    esac
done

shift $((OPTIND-1));
[ "${1:-}" = "--" ] && shift;

if [ $ARGS = 0 ]; then
    echo -e "[$_NAME] No options and arguments where given, type $_NAME -h for command usage info and help.";
    exit 1;
fi

# Script ------------------------------------------------------------------------------------------------------------------------------------------------

# Display Configuration
if [ $DEBUG = 1 ]; then
    printf "[$_NAME] Configuration:\nMount point:'${MOUNTPOINT}', \nRemote host:'${HOST}',\nSSH-Key:'${KEY}', \nDebug:${DEBUG}, \nPersitent:${PERSISTENT}.\n";
fi

# Execute SSHFS
sshfs -C -o ${SSHOPT},uid=${UID_},gid=${GID_},IdentityFile=${KEY} ${HOST} ${MOUNTPOINT};

# Display Error/Success Message
if [ $? -ne 0 ] && [ $DEBUG = 1 ]; then
     printf "[$_NAME] sshfs/fuse/$_NAME reported an error, make sure 'sshfs' is installed.\nAlso make sure the local directory to mount the remote file-system to should be free (this could happen to be false if previous ssh-mount commands failed).\nType $_NAME -h for usage info and help.\n";
     exit 1;
elif [ $DEBUG = 1 ]; then
     echo -e "[$_NAME] Successfully mounted ${HOST} at ${MOUNTPOINT}.";
fi

# End Script
exit 0;
